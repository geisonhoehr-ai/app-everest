-- ========================================
-- CRIAR USU√ÅRIOS DE TESTE DA FORMA CORRETA
-- ========================================
-- Como public.users tem FK para auth.users, precisamos:
-- 1. Criar usu√°rios no auth.users PRIMEIRO
-- 2. O trigger autom√°tico criar√° em public.users

-- ‚ö†Ô∏è IMPORTANTE: Este script s√≥ funciona se voc√™ tiver permiss√µes de SUPER USER
-- Caso contr√°rio, voc√™ precisa criar usu√°rios via interface do Supabase Auth

-- OP√á√ÉO 1: Verificar se h√° usu√°rios sem perfil em public.users
-- (usu√°rios que existem em auth.users mas n√£o em public.users)
SELECT
    'üîç Usu√°rios sem perfil:' as info,
    au.id,
    au.email,
    au.created_at
FROM auth.users au
LEFT JOIN public.users pu ON au.id = pu.id
WHERE pu.id IS NULL;

-- OP√á√ÉO 2: Sincronizar usu√°rios existentes de auth.users para public.users
-- (criar perfis para usu√°rios que j√° existem no auth mas n√£o tem perfil)
INSERT INTO public.users (id, email, first_name, last_name, role, is_active, created_at, updated_at)
SELECT
    au.id,
    au.email,
    COALESCE(au.raw_user_meta_data->>'first_name', split_part(au.email, '@', 1)) as first_name,
    COALESCE(au.raw_user_meta_data->>'last_name', '') as last_name,
    COALESCE((au.raw_user_meta_data->>'role')::user_role, 'student') as role,
    true as is_active,
    au.created_at,
    NOW() as updated_at
FROM auth.users au
LEFT JOIN public.users pu ON au.id = pu.id
WHERE pu.id IS NULL
ON CONFLICT (id) DO NOTHING;

-- VERIFICAR RESULTADO
SELECT
    '‚úÖ Sincroniza√ß√£o conclu√≠da!' as status,
    COUNT(*) as total_usuarios
FROM public.users;

-- LISTAR TODOS OS ESTUDANTES DISPON√çVEIS
SELECT
    'üìã Estudantes dispon√≠veis:' as info,
    id,
    email,
    first_name,
    last_name,
    is_active
FROM public.users
WHERE role = 'student'
ORDER BY first_name, last_name;
