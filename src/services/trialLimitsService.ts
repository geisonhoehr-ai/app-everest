import { supabase } from '@/lib/supabase/client'

/**
 * Service para gerenciar limites e conte√∫do trial (degusta√ß√£o)
 *
 * Funcionalidades:
 * - Verificar se usu√°rio est√° em turma trial
 * - Verificar se conte√∫do est√° liberado para trial
 * - Controlar limites de uso (quiz por dia, flashcards por dia, etc.)
 * - Prover dados para componentes de bloqueio/upgrade
 */

export interface TrialLimits {
  isTrialUser: boolean
  className: string | null
  durationDays: number | null
  flashcardLimitPerDay: number | null
  quizLimitPerDay: number | null
  essaySubmissionLimit: number | null
  enrollmentDate: string | null
}

export interface TrialAllowedContent {
  subjects: string[] // IDs de mat√©rias liberadas
  topics: string[] // IDs de t√≥picos liberados
  quizzes: string[] // IDs de quizzes liberados
  flashcardSets: string[] // IDs de conjuntos liberados
}

export interface ContentAccessResult {
  hasAccess: boolean
  reason?: 'trial_locked' | 'no_permission' | 'limit_exceeded' | 'allowed'
  upgradeMessage?: string
}

/**
 * Verifica se o usu√°rio est√° em uma turma trial
 */
export const getUserTrialStatus = async (userId: string): Promise<TrialLimits> => {
  try {
    console.log('üîç Verificando status trial do usu√°rio:', userId)

    // Buscar turma trial do usu√°rio
    const { data: studentClass, error } = await supabase
      .from('student_classes')
      .select(`
        enrollment_date,
        classes!inner(
          name,
          class_type,
          trial_duration_days,
          trial_flashcard_limit_per_day,
          trial_quiz_limit_per_day,
          trial_essay_submission_limit
        )
      `)
      .eq('user_id', userId)
      .eq('classes.class_type', 'trial')
      .single()

    if (error || !studentClass) {
      console.log('‚úÖ Usu√°rio n√£o est√° em turma trial')
      return {
        isTrialUser: false,
        className: null,
        durationDays: null,
        flashcardLimitPerDay: null,
        quizLimitPerDay: null,
        essaySubmissionLimit: null,
        enrollmentDate: null,
      }
    }

    const classData = studentClass.classes as any

    console.log('üéØ Usu√°rio em turma trial:', classData.name)

    return {
      isTrialUser: true,
      className: classData.name,
      durationDays: classData.trial_duration_days,
      flashcardLimitPerDay: classData.trial_flashcard_limit_per_day,
      quizLimitPerDay: classData.trial_quiz_limit_per_day,
      essaySubmissionLimit: classData.trial_essay_submission_limit,
      enrollmentDate: studentClass.enrollment_date,
    }
  } catch (error) {
    console.error('üí• Erro ao verificar status trial:', error)
    return {
      isTrialUser: false,
      className: null,
      durationDays: null,
      flashcardLimitPerDay: null,
      quizLimitPerDay: null,
      essaySubmissionLimit: null,
      enrollmentDate: null,
    }
  }
}

/**
 * Busca conte√∫do liberado para trial
 */
export const getTrialAllowedContent = async (userId: string): Promise<TrialAllowedContent> => {
  try {
    console.log('üîç Buscando conte√∫do liberado para trial:', userId)

    // Buscar class_id do usu√°rio
    const { data: studentClass } = await supabase
      .from('student_classes')
      .select('class_id, classes!inner(class_type)')
      .eq('user_id', userId)
      .eq('classes.class_type', 'trial')
      .single()

    if (!studentClass) {
      return { subjects: [], topics: [], quizzes: [], flashcardSets: [] }
    }

    // Buscar conte√∫do liberado
    const { data: allowedContent, error } = await supabase
      .from('trial_allowed_content')
      .select('content_type, content_id')
      .eq('class_id', studentClass.class_id)

    if (error || !allowedContent) {
      console.error('‚ùå Erro ao buscar conte√∫do liberado:', error)
      return { subjects: [], topics: [], quizzes: [], flashcardSets: [] }
    }

    // Agrupar por tipo
    const result: TrialAllowedContent = {
      subjects: allowedContent.filter(c => c.content_type === 'subject').map(c => c.content_id),
      topics: allowedContent.filter(c => c.content_type === 'topic').map(c => c.content_id),
      quizzes: allowedContent.filter(c => c.content_type === 'quiz').map(c => c.content_id),
      flashcardSets: allowedContent.filter(c => c.content_type === 'flashcard_set').map(c => c.content_id),
    }

    console.log('‚úÖ Conte√∫do trial liberado:', result)
    return result
  } catch (error) {
    console.error('üí• Erro ao buscar conte√∫do trial:', error)
    return { subjects: [], topics: [], quizzes: [], flashcardSets: [] }
  }
}

/**
 * Verifica se um conte√∫do espec√≠fico est√° acess√≠vel para o usu√°rio
 */
export const checkContentAccess = async (
  userId: string,
  contentType: 'subject' | 'topic' | 'quiz' | 'flashcard_set',
  contentId: string
): Promise<ContentAccessResult> => {
  try {
    // Verificar se √© usu√°rio trial
    const trialStatus = await getUserTrialStatus(userId)

    if (!trialStatus.isTrialUser) {
      // N√£o √© trial, tem acesso baseado em permiss√µes normais
      return { hasAccess: true, reason: 'allowed' }
    }

    // √â usu√°rio trial - verificar se conte√∫do est√° liberado
    const allowedContent = await getTrialAllowedContent(userId)

    let isAllowed = false
    let contentName = ''

    switch (contentType) {
      case 'subject':
        isAllowed = allowedContent.subjects.includes(contentId)
        contentName = 'mat√©ria'
        break
      case 'topic':
        isAllowed = allowedContent.topics.includes(contentId)
        contentName = 't√≥pico'
        break
      case 'quiz':
        isAllowed = allowedContent.quizzes.includes(contentId)
        contentName = 'quiz'
        break
      case 'flashcard_set':
        isAllowed = allowedContent.flashcardSets.includes(contentId)
        contentName = 'conjunto de flashcards'
        break
    }

    if (isAllowed) {
      return { hasAccess: true, reason: 'allowed' }
    }

    return {
      hasAccess: false,
      reason: 'trial_locked',
      upgradeMessage: `Este ${contentName} est√° dispon√≠vel apenas para assinantes. Fa√ßa upgrade para acessar todo o conte√∫do!`
    }
  } catch (error) {
    console.error('üí• Erro ao verificar acesso ao conte√∫do:', error)
    return { hasAccess: false, reason: 'trial_locked' }
  }
}

/**
 * Verifica se usu√°rio atingiu limite di√°rio de quizzes
 */
export const checkQuizDailyLimit = async (userId: string): Promise<ContentAccessResult> => {
  try {
    const trialStatus = await getUserTrialStatus(userId)

    if (!trialStatus.isTrialUser) {
      return { hasAccess: true, reason: 'allowed' }
    }

    if (!trialStatus.quizLimitPerDay) {
      return { hasAccess: true, reason: 'allowed' }
    }

    // Contar quizzes feitos hoje
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    const { data: attempts, error } = await supabase
      .from('quiz_attempts')
      .select('id')
      .eq('user_id', userId)
      .gte('attempt_date', today.toISOString())

    if (error) {
      console.error('‚ùå Erro ao verificar limite de quizzes:', error)
      return { hasAccess: false, reason: 'trial_locked' }
    }

    const attemptCount = attempts?.length || 0

    if (attemptCount >= trialStatus.quizLimitPerDay) {
      return {
        hasAccess: false,
        reason: 'limit_exceeded',
        upgradeMessage: `Voc√™ atingiu o limite de ${trialStatus.quizLimitPerDay} quiz(es) por dia. Fa√ßa upgrade para acesso ilimitado!`
      }
    }

    return { hasAccess: true, reason: 'allowed' }
  } catch (error) {
    console.error('üí• Erro ao verificar limite de quizzes:', error)
    return { hasAccess: false, reason: 'trial_locked' }
  }
}

/**
 * Verifica se usu√°rio atingiu limite di√°rio de flashcards
 */
export const checkFlashcardDailyLimit = async (userId: string): Promise<ContentAccessResult> => {
  try {
    const trialStatus = await getUserTrialStatus(userId)

    if (!trialStatus.isTrialUser) {
      return { hasAccess: true, reason: 'allowed' }
    }

    if (!trialStatus.flashcardLimitPerDay) {
      return { hasAccess: true, reason: 'allowed' }
    }

    // Contar flashcards revisados hoje
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    const { data: progress, error } = await supabase
      .from('flashcard_progress')
      .select('id')
      .eq('user_id', userId)
      .gte('last_reviewed_at', today.toISOString())

    if (error) {
      console.error('‚ùå Erro ao verificar limite de flashcards:', error)
      return { hasAccess: false, reason: 'trial_locked' }
    }

    const reviewCount = progress?.length || 0

    if (reviewCount >= trialStatus.flashcardLimitPerDay) {
      return {
        hasAccess: false,
        reason: 'limit_exceeded',
        upgradeMessage: `Voc√™ atingiu o limite de ${trialStatus.flashcardLimitPerDay} flashcards por dia. Fa√ßa upgrade para acesso ilimitado!`
      }
    }

    return { hasAccess: true, reason: 'allowed' }
  } catch (error) {
    console.error('üí• Erro ao verificar limite de flashcards:', error)
    return { hasAccess: false, reason: 'trial_locked' }
  }
}

/**
 * Dados para exibir modal/banner de upgrade
 */
export const getUpgradeCallToAction = (trialStatus: TrialLimits) => {
  if (!trialStatus.isTrialUser) return null

  return {
    title: 'üöÄ Desbloqueie Todo o Conte√∫do!',
    description: 'Voc√™ est√° em modo degusta√ß√£o. Fa√ßa upgrade para ter acesso completo a todas as mat√©rias, quizzes, flashcards e muito mais!',
    benefits: [
      '‚úÖ Acesso ilimitado a todas as mat√©rias',
      '‚úÖ Todos os t√≥picos e conte√∫dos',
      '‚úÖ Quizzes e simulados ilimitados',
      '‚úÖ Flashcards sem limites di√°rios',
      '‚úÖ Sistema de reda√ß√µes completo',
      '‚úÖ Evercast e videoaulas',
      '‚úÖ Suporte priorit√°rio',
    ],
    ctaButton: 'Fazer Upgrade Agora',
    ctaLink: '/upgrade',
  }
}

export type { TrialLimits, TrialAllowedContent, ContentAccessResult }
